{"ast":null,"code":"import numeral from \"numeral\";\nexport var shorterAddress = function shorterAddress(string) {\n  return string ? string.slice(0, 6) + \"...\" + string.substr(-4) : string;\n};\nexport var wait = function wait(time) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve(true);\n    }, time);\n  });\n};\nvar formatNumberSmall = function formatNumberSmall(scientificNotation) {\n  var num = parseFloat(scientificNotation);\n  var eIndex = num.toString().indexOf(\"e\");\n  var exponent = parseInt(num.toString().slice(eIndex + 2), 10);\n  var significand = parseFloat(num.toString().slice(0, eIndex).slice(0, 4).split(\"\").filter(function (e) {\n    return e !== \".\";\n  }).join(\"\"));\n  if (isNaN(num)) {\n    return \"NaN\";\n  }\n  var formatarr = [\"0\", '.'];\n  for (var i = 0; i < exponent - 1; i++) {\n    formatarr.push(\"0\");\n  }\n  var formatString = formatarr.join(\"\").toString();\n  var formattedNum = formatString + significand;\n  return formattedNum;\n};\nexport var formatValue = function formatValue(input) {\n  return numeral(input).format(\"0,0.00\") === \"NaN\" ? formatNumberSmall(input) : input !== 0 && input > 0 && input < 0.01 ? \"<$0.01\" : numeral(input).format(\"$0,0.00\");\n};\nexport var formatCurrency = function formatCurrency(input) {\n  return numeral(input).format(\"0,0.000000\") === \"NaN\" ? formatNumberSmall(input) : input !== 0 && input > 0 && input < 0.01 ? numeral(input).format(\"0,0.000000\") : numeral(input).format(\"0,0.0000\");\n};\nexport var formatPercent = function formatPercent(input) {\n  return numeral(input).format(\"0,0.00\");\n};\nexport var formatSmallBalance = function formatSmallBalance(input) {\n  return numeral(input).format(\"0.000e+0\");\n};\nexport var formatBigBalance = function formatBigBalance(input) {\n  if (formatPercent(input) === \"NaN\") {\n    return {\n      number_format: formatSmallBalance(input),\n      number_size: \"\"\n    };\n  } else {\n    var regExp = /[a-zA-Z]/g;\n    var numberFormat = numeral(input).format(\"0.00a\");\n    if (regExp.test(numberFormat)) {\n      return {\n        number_format: Number(numberFormat.slice(0, -1)),\n        number_size: numberFormat.slice(-1).toUpperCase()\n      };\n    } else {\n      return {\n        number_format: Number(numberFormat),\n        number_size: \"\"\n      };\n    }\n  }\n};","map":{"version":3,"names":["numeral","shorterAddress","string","slice","substr","wait","time","Promise","resolve","setTimeout","formatNumberSmall","scientificNotation","num","parseFloat","eIndex","toString","indexOf","exponent","parseInt","significand","split","filter","e","join","isNaN","formatarr","i","push","formatString","formattedNum","formatValue","input","format","formatCurrency","formatPercent","formatSmallBalance","formatBigBalance","number_format","number_size","regExp","numberFormat","test","Number","toUpperCase"],"sources":["/Users/binhnguyen/Desktop/xnft/src/utils.ts"],"sourcesContent":["import numeral from \"numeral\";\n\nexport const shorterAddress = (string: string) => {\n  return string ? string.slice(0, 6) + \"...\" + string.substr(-4) : string;\n};\n\nexport const wait = (time: number) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(true);\n    }, time);\n  });\n};\n\nconst formatNumberSmall = (scientificNotation: any) => {\n  const num = parseFloat(scientificNotation);\n  const eIndex = num.toString().indexOf(\"e\");\n  const exponent = parseInt(num.toString().slice(eIndex + 2), 10);\n  const significand = parseFloat(\n    num.toString()\n      .slice(0, eIndex)\n      .slice(0, 4)\n      .split(\"\")\n      .filter((e) => {\n        return e !== \".\"\n      })\n      .join(\"\")\n  );\n\n  if (isNaN(num)) {\n    return \"NaN\";\n  }\n\n  let formatarr = [\"0\", '.'];\n  for (let i = 0; i < exponent - 1; i++) {\n    formatarr.push(\"0\")\n  }\n  const formatString = formatarr.join(\"\").toString()\n  const formattedNum = formatString + significand\n  return formattedNum;\n}\n\nexport const formatValue = (input: number) => {\n  return numeral(input).format(\"0,0.00\") === \"NaN\"\n    ? formatNumberSmall(input)\n    : input !== 0 && input > 0 && input < 0.01 ? \"<$0.01\" : numeral(input).format(\"$0,0.00\");\n};\n\nexport const formatCurrency = (input: number) => {\n  return numeral(input).format(\"0,0.000000\") === \"NaN\"\n    ? formatNumberSmall(input)\n    : input !== 0 && input > 0 && input < 0.01 ? numeral(input).format(\"0,0.000000\") : numeral(input).format(\"0,0.0000\");\n};\n\nexport const formatPercent = (input: number) => {\n  return numeral(input).format(\"0,0.00\")\n}\n\nexport const formatSmallBalance = (input: number) => {\n  return numeral(input).format(\"0.000e+0\");\n};\n\nexport const formatBigBalance = (input: number) => {\n  if (formatPercent(input) === \"NaN\") {\n    return {\n      number_format: formatSmallBalance(input),\n      number_size: \"\"\n    }\n  } else {\n    const regExp = /[a-zA-Z]/g;\n    const numberFormat = numeral(input).format(\"0.00a\")\n    if (regExp.test(numberFormat)) {\n      return {\n        number_format: Number(numberFormat.slice(0, -1)),\n        number_size: numberFormat.slice(-1).toUpperCase()\n      }\n    } else {\n      return {\n        number_format: Number(numberFormat),\n        number_size: \"\"\n      }\n    }\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}